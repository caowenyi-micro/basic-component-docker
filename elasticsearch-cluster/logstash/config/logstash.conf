input {
  jdbc {
    type => "operation_log"
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java-8.0.16.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://10.100.11.36:3307/micro_web"
    jdbc_user => "root"
    jdbc_password => "123456"
    connection_retry_attempts => "3"
     # 数据库重连尝试次数
    connection_retry_attempts => "3"
    # 判断数据库连接是否可用，默认false不开启
    jdbc_validate_connection => "true"
    # 数据库连接可用校验超时时间，默认3600S
    jdbc_validation_timeout => "3600"
    # 开启分页查询（默认false不开启）；
    jdbc_paging_enabled => "true"
    # 单次分页查询条数（默认100000,若字段较多且更新频率较高，建议调低此值）；
    jdbc_page_size => "500"
    jdbc_default_timezone => "Asia/Shanghai"
    # statement为查询数据sql，如果sql较复杂，建议配通过statement_filepath配置sql文件的存放路径；
    # sql_last_value为内置的变量，存放上次查询结果中最后一条数据tracking_column的值，此处即为ModifyTime；
	 # statement_filepath => "mysql/jdbc.sql"
    #字段名称我都用驼峰格式，主要是我bo属性名就是驼峰格式，可以不需要转换就能直接映射值
    statement => "SELECT  id, create_time  createTime, update_time updateTime, application_name  applicationName, class_name className,
    method_name methodName, user_id userId, user_name userName, client_id clientId, param, result from operation_log WHERE
    update_time>= :sql_last_value order by update_time asc"
    # 是否将字段名转换为小写，默认true（如果有数据序列化、反序列化需求，建议改为false）；
    lowercase_column_names => false
    # Value can be any of: fatal,error,warn,info,debug，默认info；
    sql_log_level => warn
    # 是否记录上次执行结果，true表示会将上次执行结果的tracking_column字段的值保存到last_run_metadata_path指定的文件中；
    record_last_run => true
    # 需要记录查询结果某字段的值时，此字段为true，否则默认tracking_column为timestamp的值；
    use_column_value => true
    # 需要记录的字段，用于增量同步，需是数据库字段
    tracking_column => "updateTime"
    # Value can be any of: numeric,timestamp，Default value is "numeric"
    tracking_column_type => timestamp
    # 是否清除last_run_metadata_path的记录，需要增量同步时此字段必须为false；
    clean_run => false
    # 同步频率(分 时 天 月 年)，默认每分钟同步一次；
    schedule => "*/5 * * * * *"
  }

  jdbc {
      type => "sys_user"
      jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java-8.0.16.jar"
      jdbc_driver_class => "com.mysql.jdbc.Driver"
      jdbc_connection_string => "jdbc:mysql://10.100.11.36:3307/micro_web"
      jdbc_user => "root"
      jdbc_password => "123456"
      connection_retry_attempts => "3"
       # 数据库重连尝试次数
      connection_retry_attempts => "3"
      # 判断数据库连接是否可用，默认false不开启
      jdbc_validate_connection => "true"
      # 数据库连接可用校验超时时间，默认3600S
      jdbc_validation_timeout => "3600"
      # 开启分页查询（默认false不开启）；
      jdbc_paging_enabled => "true"
      # 单次分页查询条数（默认100000,若字段较多且更新频率较高，建议调低此值）；
      jdbc_page_size => "500"
      jdbc_default_timezone => "Asia/Shanghai"
      # statement为查询数据sql，如果sql较复杂，建议配通过statement_filepath配置sql文件的存放路径；
      # sql_last_value为内置的变量，存放上次查询结果中最后一条数据tracking_column的值，此处即为ModifyTime；
  	 # statement_filepath => "mysql/jdbc.sql"
      #字段名称我都用驼峰格式，主要是我bo属性名就是驼峰格式，可以不需要转换就能直接映射值
      statement => "SELECT  id, username, nickname, mobile, create_time createTime, update_time updateTime from sys_user WHERE
      update_time>= :sql_last_value order by update_time asc"
      # 是否将字段名转换为小写，默认true（如果有数据序列化、反序列化需求，建议改为false）；
      lowercase_column_names => false
      # Value can be any of: fatal,error,warn,info,debug，默认info；
      sql_log_level => warn
      # 是否记录上次执行结果，true表示会将上次执行结果的tracking_column字段的值保存到last_run_metadata_path指定的文件中；
      record_last_run => true
      # 需要记录查询结果某字段的值时，此字段为true，否则默认tracking_column为timestamp的值；
      use_column_value => true
      # 需要记录的字段，用于增量同步，需是数据库字段
      tracking_column => "updateTime"
      # Value can be any of: numeric,timestamp，Default value is "numeric"
      tracking_column_type => timestamp
      # 是否清除last_run_metadata_path的记录，需要增量同步时此字段必须为false；
      clean_run => false
      # 同步频率(分 时 天 月 年)，默认每分钟同步一次；
      schedule => "*/5 * * * * *"
    }
}

filter {
  json {
    source => "message"
    remove_field => ["message"]
  }
  date {
    match => ["updateTime", "YYYY-MM-DD HH:mm:ss.SSS"]
  }
}

output{
  stdout {
    codec => json_lines
  }

  if [type] == "operation_log" {
    elasticsearch {
        #ESIP地址与端口
        hosts => ["10.100.11.36:9200","10.100.11.36:9201","10.100.11.36:9202"]
        #ES索引名称（自己定义的）
        index => "micro_web_operation_log"
        #文档类型
        document_type => "operation_log"
        #文档类型id
        document_id => "%{id}"
      }
  }

  if [type] == "sys_user" {
      elasticsearch {
          #ESIP地址与端口
          hosts => ["10.100.11.36:9200","10.100.11.36:9201","10.100.11.36:9202"]
          #ES索引名称（自己定义的）
          index => "micro_web_sys_user"
          #文档类型
          document_type => "sys_user"
          #文档类型id
          document_id => "%{id}"
      }
   }

 }